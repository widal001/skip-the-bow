---
interface Props {
  links?: Array<{
    href: string;
    text: string;
  }>;
}

// Add type for auth locals
interface AuthLocals {
  auth?: {
    session: () => Promise<{ user?: any } | null>;
  };
}

const { links = [] } = Astro.props;

// Check session on server side
const session = await (Astro.locals as AuthLocals).auth?.session();
const isLoggedIn = !!session?.user;
---

<nav>
  <div class="nav-container">
    <div class="nav-left">
      <a href="/" class="nav-link home-link">Skip the Bow</a>
    </div>
    <div class="nav-right">
      {
        links.map((link) => (
          <a href={link.href} class="nav-link">
            {link.text}
          </a>
        ))
      }
      <button
        class="nav-link"
        id="login"
        style={`display: ${isLoggedIn ? "none" : "block"}`}
        aria-label="Login to your account"
        type="button"
      >
        Login
      </button>
      <button
        class="nav-link"
        id="logout"
        style={`display: ${isLoggedIn ? "block" : "none"}`}
        aria-label="Logout from your account"
        type="button"
      >
        Logout
      </button>
    </div>
  </div>
</nav>

<script>
  async function getSession() {
    const res = await fetch("/api/auth/session");
    if (!res.ok) return null;
    return await res.json();
  }

  async function checkLoginStatus() {
    const cachedLoginState = sessionStorage.getItem("isLoggedIn");
    if (cachedLoginState !== null) {
      return cachedLoginState === "true";
    }

    const session = await getSession();
    const isLoggedIn = !!session?.user;
    sessionStorage.setItem("isLoggedIn", isLoggedIn.toString());
    return isLoggedIn;
  }

  // Function to update button visibility
  function updateButtonVisibility(isLoggedIn: boolean) {
    const loginButton = document.getElementById("login");
    const logoutButton = document.getElementById("logout");

    if (isLoggedIn) {
      loginButton?.style.setProperty("display", "none");
      logoutButton?.style.setProperty("display", "block");
    } else {
      loginButton?.style.setProperty("display", "block");
      logoutButton?.style.setProperty("display", "none");
    }
  }

  // Initial check and update
  checkLoginStatus().then(updateButtonVisibility);

  // Set up auth event listeners
  const { signIn, signOut } = await import("auth-astro/client");

  document.querySelector("#login")?.addEventListener("click", async () => {
    sessionStorage.removeItem("isLoggedIn");
    await signIn("github");
  });

  document.querySelector("#logout")?.addEventListener("click", async () => {
    sessionStorage.removeItem("isLoggedIn");
    await signOut();
  });
</script>

<style>
  nav {
    position: sticky;
    top: 0;
    background: var(--color-white);
    padding: 1rem;
    border-bottom: 1px solid var(--color-gray-200);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    z-index: 100;
  }

  .nav-container {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .nav-left {
    display: flex;
    align-items: center;
  }

  .nav-right {
    display: flex;
    gap: 1.5rem;
    align-items: center;
  }

  .nav-link {
    color: var(--color-gray-900);
    text-decoration: none;
    font-weight: 500;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    transition: all 0.2s ease;
    position: relative;
    background: none;
    border: none;
    cursor: pointer;
    font-family: inherit;
    font-size: inherit;
  }

  .nav-link:hover {
    background-color: var(--color-primary-light);
    color: var(--color-primary-dark);
  }

  .nav-link::after {
    content: "";
    position: absolute;
    bottom: -2px;
    left: 0;
    right: 0;
    height: 2px;
    background-color: var(--color-primary);
    transform: scaleX(0);
    transition: transform 0.2s ease;
  }

  .nav-link:hover::after {
    transform: scaleX(1);
  }

  .home-link {
    font-weight: 600;
    font-size: 1.25rem;
    color: var(--color-primary);
  }

  .home-link:hover {
    background-color: var(--color-primary-light);
    color: var(--color-primary-dark);
  }

  @media (max-width: 768px) {
    .nav-right {
      gap: 1rem;
    }

    .nav-link {
      padding: 0.5rem 0.75rem;
    }
  }

  /* Add fixed width for auth buttons */
  #login,
  #logout {
    width: 90px;
    text-align: center;
  }
</style>

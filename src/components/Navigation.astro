---
import { getSession } from "auth-astro/server";

interface Props {
  links?: Array<{
    href: string;
    text: string;
  }>;
}

const { links = [] } = Astro.props;

// Check session on server side
const session = await getSession(Astro.request);
const isLoggedIn = !!session?.user;
const user = session?.user;
---

<nav>
  <div class="nav-container">
    <div class="nav-left">
      <a href="/" class="nav-link home-link">Skip the Bow</a>
    </div>
    <div class="nav-right">
      {
        links.map((link) => (
          <a href={link.href} class="nav-link">
            {link.text}
          </a>
        ))
      }
      <button
        class="nav-link"
        id="login"
        style={`display: ${isLoggedIn ? "none" : "block"}`}
        aria-label="Login to your account"
        type="button"
      >
        Login
      </button>
      <div
        class="user-dropdown"
        id="user-dropdown"
        style={`display: ${isLoggedIn ? "block" : "none"}`}
      >
        <button
          class="user-button"
          id="user-button"
          aria-label="User menu"
          type="button"
        >
          <span class="user-info">
            {user?.name || user?.email || "User"}
          </span>
          <svg
            class="dropdown-arrow"
            width="12"
            height="12"
            viewBox="0 0 12 12"
            fill="none"
          >
            <path
              d="M2 4L6 8L10 4"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"></path>
          </svg>
        </button>
        <div class="dropdown-menu" id="dropdown-menu">
          <a href="/profile/" class="dropdown-item"> Profile </a>
          <button class="dropdown-item" id="logout"> Logout </button>
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  import { $bookmarkStore } from "@/lib/stores/bookmark-store";

  async function getSession() {
    const res = await fetch("/api/auth/session");
    if (!res.ok) return null;
    return await res.json();
  }

  async function checkLoginStatus() {
    const cachedLoginState = sessionStorage.getItem("isLoggedIn");
    const cachedUserEmail = sessionStorage.getItem("userEmail");
    const cachedUserName = sessionStorage.getItem("userName");
    if (cachedLoginState !== null) {
      return {
        isLoggedIn: cachedLoginState === "true",
        userEmail: cachedUserEmail ?? undefined,
        userName: cachedUserName ?? undefined,
      };
    }

    const session = await getSession();
    const isLoggedIn = !!session?.user;
    const userEmail = session?.user?.email;
    const userName = session?.user?.name;
    sessionStorage.setItem("isLoggedIn", isLoggedIn.toString());
    sessionStorage.setItem("userEmail", userEmail);
    sessionStorage.setItem("userName", userName);
    return { isLoggedIn, userEmail, userName };
  }

  // Function to update button visibility
  function updateButtonVisibility(
    isLoggedIn: boolean,
    userEmail?: string,
    userName?: string
  ) {
    const loginButton = document.getElementById("login");
    const userDropdown = document.getElementById("user-dropdown");
    const userButton = document.getElementById("user-button");
    const userInfoRow = document.getElementById("user-info-row");

    if (isLoggedIn) {
      loginButton?.style.setProperty("display", "none");
      userDropdown?.style.setProperty("display", "block");

      // Update user button text
      const userDisplayName = userName || userEmail || "User";
      const userButtonText = userButton?.querySelector(".user-info");
      if (userButtonText) {
        userButtonText.textContent = userDisplayName;
      }

      // Update dropdown user info row
      if (userInfoRow) {
        userInfoRow.textContent = userDisplayName;
      }
    } else {
      loginButton?.style.setProperty("display", "block");
      userDropdown?.style.setProperty("display", "none");
    }
  }

  // Initial check and update
  checkLoginStatus().then(({ isLoggedIn, userEmail, userName }) =>
    updateButtonVisibility(isLoggedIn, userEmail, userName)
  );

  // Set up auth event listeners
  const { signIn, signOut } = await import("auth-astro/client");

  document.querySelector("#login")?.addEventListener("click", async () => {
    sessionStorage.removeItem("isLoggedIn");
    await signIn("github");
  });

  document.querySelector("#logout")?.addEventListener("click", async () => {
    sessionStorage.removeItem("isLoggedIn");
    $bookmarkStore.set({});
    await signOut();
  });

  // Dropdown functionality
  const userButton = document.getElementById("user-button");
  const dropdownMenu = document.getElementById("dropdown-menu");

  userButton?.addEventListener("click", () => {
    dropdownMenu?.classList.toggle("show");
  });

  // Close dropdown when clicking outside
  document.addEventListener("click", (event) => {
    const target = event.target as Element;
    if (!userButton?.contains(target) && !dropdownMenu?.contains(target)) {
      dropdownMenu?.classList.remove("show");
    }
  });
</script>

<style>
  nav {
    position: sticky;
    top: 0;
    background: var(--color-white);
    padding: 1rem;
    border-bottom: 1px solid var(--color-gray-200);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    z-index: 100;
  }

  .nav-container {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .nav-left {
    display: flex;
    align-items: center;
  }

  .nav-right {
    display: flex;
    gap: 1.5rem;
    align-items: center;
  }

  .nav-link {
    color: var(--color-gray-900);
    text-decoration: none;
    font-weight: 500;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    transition: all 0.2s ease;
    position: relative;
    background: none;
    border: none;
    cursor: pointer;
    font-family: inherit;
    font-size: inherit;
  }

  .nav-link:hover {
    background-color: var(--color-primary-light);
    color: var(--color-primary-dark);
  }

  .nav-link::after {
    content: "";
    position: absolute;
    bottom: -2px;
    left: 0;
    right: 0;
    height: 2px;
    background-color: var(--color-primary);
    transform: scaleX(0);
    transition: transform 0.2s ease;
  }

  .nav-link:hover::after {
    transform: scaleX(1);
  }

  .home-link {
    font-weight: 600;
    font-size: 1.25rem;
    color: var(--color-primary);
  }

  .home-link:hover {
    background-color: var(--color-primary-light);
    color: var(--color-primary-dark);
  }

  /* User dropdown styles */
  .user-dropdown {
    position: relative;
  }

  .user-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    color: var(--color-gray-900);
    font-weight: 500;
    transition: all 0.2s ease;
    font-family: inherit;
    font-size: inherit;
    min-width: 140px;
    text-align: center;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .user-button:hover {
    background-color: var(--color-primary-light);
    color: var(--color-primary-dark);
  }

  .user-info {
    max-width: 150px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .dropdown-arrow {
    transition: transform 0.2s ease;
  }

  .user-button:hover .dropdown-arrow {
    transform: rotate(180deg);
  }

  .dropdown-menu {
    position: absolute;
    top: 100%;
    right: 0;
    background: var(--color-white);
    border: 1px solid var(--color-gray-200);
    border-radius: 6px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    min-width: 140px;
    max-width: 140px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.2s ease;
    z-index: 1000;
  }

  .dropdown-menu.show {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .dropdown-item {
    display: block;
    width: 100%;
    padding: 0.75rem 1rem;
    text-decoration: none;
    color: var(--color-gray-900);
    background: none;
    border: none;
    cursor: pointer;
    font-family: inherit;
    font-size: inherit;
    text-align: left;
    transition: background-color 0.2s ease;
    width: 100%;
    box-sizing: border-box;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .dropdown-item:hover {
    background-color: var(--color-gray-100);
  }

  .dropdown-item:first-child {
    border-radius: 6px 6px 0 0;
  }

  .dropdown-item:last-child {
    border-radius: 0 0 6px 6px;
  }

  .user-info-row {
    background-color: var(--color-gray-50);
    color: var(--color-gray-700);
    font-weight: 600;
    border-bottom: 1px solid var(--color-gray-200);
    cursor: default;
  }

  .user-info-row:hover {
    background-color: var(--color-gray-50);
  }

  @media (max-width: 768px) {
    .nav-right {
      gap: 1rem;
    }

    .nav-link {
      padding: 0.5rem 0.75rem;
    }

    .user-info {
      max-width: 100px;
    }
  }

  /* Add fixed width for auth buttons */
  #login {
    width: 140px;
    text-align: center;
  }
</style>

---
import Layout from "@/layouts/Layout.astro";
import { getGiftIdeas } from "@/lib/services/gift-service";
import Pill from "@/components/Pill.astro";
import "@/styles/colors.css";
import { db } from "@/db";

export async function getStaticPaths() {
  const ideas = await getGiftIdeas(db);
  return ideas.map((gift) => ({
    params: { slug: gift.slug },
    props: { gift },
  }));
}

const { gift } = Astro.props;
---

<Layout title={gift.name} description={gift.description}>
  <article class="gift-detail" data-category={gift.category}>
    <div class="gift-detail__header">
      <div class="gift-detail__header-top">
        <Pill text={gift.category} category={gift.category} />
      </div>
      <div class="gift-detail__title-container">
        <h1 class="gift-detail__title">{gift.name}</h1>
        <button class="save-button" aria-label="Save gift idea">
          <svg
            width="28"
            height="28"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path
              d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"
            ></path>
          </svg>
        </button>
      </div>
      <p class="gift-detail__description">{gift.description}</p>
    </div>

    <div class="gift-detail__content">
      <div class="gift-detail__tags">
        {
          gift.tags.map((tag: string) => (
            <a href={`/gifts?tags=${tag}`}>
              <Pill
                text={tag}
                color="var(--color-gray-900)"
                backgroundColor="var(--category-secondary)"
                borderColor="var(--category-accent)"
              />
            </a>
          ))
        }
      </div>

      <div class="gift-detail__price">
        <span class="gift-detail__price-label">Price Range</span>
        <span class="gift-detail__price-value"
          >${gift.priceRange.min}â€“${gift.priceRange.max}</span
        >
      </div>

      <a
        href={gift.link}
        target="_blank"
        rel="noopener noreferrer"
        class="gift-detail__link"
      >
        Learn More
      </a>
    </div>
  </article>
</Layout>

<script>
  import {
    $bookmarkStore,
    isBookmarked,
    hasBookmarkKey,
    setBookmarked,
    setNotBookmarked,
    checkBookmarkStatus,
  } from "@/lib/store";

  // Get the current gift slug from the URL
  const pathSegments = window.location.pathname.split("/");
  const currentSlug = pathSegments[pathSegments.length - 1];

  // Get the save button element
  const saveButton = document.querySelector(
    ".save-button"
  ) as HTMLButtonElement;
  const heartPath = saveButton?.querySelector("path") as SVGPathElement;

  if (saveButton && heartPath) {
    // Function to update button appearance based on bookmark status
    function updateButtonAppearance(isBookmarked: boolean) {
      if (isBookmarked) {
        saveButton.setAttribute("aria-pressed", "true");
        heartPath.setAttribute("fill", "currentColor");
      } else {
        saveButton.setAttribute("aria-pressed", "false");
        heartPath.setAttribute("fill", "none");
      }
    }

    // Function to handle button click with loading state
    async function handleBookmarkClick() {
      if (!saveButton || saveButton.disabled) return;

      // Disable button during API call
      saveButton.disabled = true;

      try {
        const currentlyBookmarked = isBookmarked(currentSlug);

        if (currentlyBookmarked) {
          await setNotBookmarked(currentSlug);
        } else {
          await setBookmarked(currentSlug);
        }
      } catch (error) {
        console.error("Failed to toggle bookmark:", error);
        // Optionally show an error message to the user
      } finally {
        // Re-enable button
        saveButton.disabled = false;
      }
    }

    // Initialize button appearance and check bookmark status from API
    async function initializeBookmarkStatus() {
      try {
        // First check if we have the bookmark status in local store
        if (hasBookmarkKey(currentSlug)) {
          const localBookmarkStatus = isBookmarked(currentSlug);
          updateButtonAppearance(localBookmarkStatus);
          return;
        }

        // Only call API if we don't have the status in local store
        const apiBookmarkStatus = await checkBookmarkStatus(currentSlug);
        console.log("apiBookmarkStatus", apiBookmarkStatus);

        // Update local store to match API status
        if (apiBookmarkStatus) {
          $bookmarkStore.setKey(currentSlug, true);
        } else {
          $bookmarkStore.setKey(currentSlug, false);
        }

        // Update button appearance
        updateButtonAppearance(apiBookmarkStatus);
      } catch (error) {
        console.error("Failed to initialize bookmark status:", error);
        // Fall back to local state
        const bookmarked = isBookmarked(currentSlug);
        updateButtonAppearance(bookmarked);
      }
    }

    // Initialize bookmark status
    initializeBookmarkStatus();

    // Subscribe to store changes
    $bookmarkStore.subscribe((store) => {
      const isCurrentlyBookmarked = store[currentSlug] || false;
      updateButtonAppearance(isCurrentlyBookmarked);
    });

    // Handle button click
    saveButton.addEventListener("click", handleBookmarkClick);
  }
</script>

<style>
  .gift-detail {
    max-width: 800px;
    margin: 0 auto;
    padding: 1rem;
    background: var(--color-white);
    border-radius: 8px;
    box-shadow:
      0 4px 6px -1px rgb(0 0 0 / 0.1),
      0 2px 4px -2px rgb(0 0 0 / 0.1);
  }

  .gift-detail__header {
    margin-bottom: 1.5rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid var(--color-gray-200);
  }

  .gift-detail__header-top {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1rem;
  }

  .gift-detail__title-container {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    max-width: fit-content;
  }

  .gift-detail__title {
    font-size: 1.75rem;
    margin: 0;
    color: var(--color-gray-900);
    line-height: 1.2;
  }

  .save-button {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    width: 40px;
    height: 40px;
    padding: 0;
    border: none;
    background: transparent;
    color: var(--color-gray-400);
    cursor: pointer;
    border-radius: 50%;
    transition: all 0.2s ease;
  }

  .gift-detail__description {
    font-size: 1rem;
    line-height: 1.6;
    color: var(--color-gray-600);
    margin: 0;
  }

  .gift-detail__content {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .gift-detail__tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .gift-detail__price {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .gift-detail__price-label {
    font-size: 0.875rem;
    color: var(--color-gray-500);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .gift-detail__price-value {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--category-primary);
  }

  .gift-detail__link {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem 1rem;
    background: var(--category-primary);
    color: var(--color-white);
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    transition: all 0.2s ease;
    width: 100%;
    box-sizing: border-box;
    text-align: center;
  }

  /* Tablet and up (md: 768px) */
  @media (min-width: 640px) {
    .gift-detail {
      padding: 2rem;
      border-radius: 12px;
    }

    .gift-detail__header {
      margin-bottom: 2rem;
      padding-bottom: 2rem;
    }

    .gift-detail__header-top {
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .gift-detail__title {
      font-size: 2.25rem;
    }

    .save-button {
      width: 48px;
      height: 48px;
    }

    .gift-detail__description {
      font-size: 1.125rem;
      line-height: 1.7;
    }

    .gift-detail__content {
      gap: 2rem;
    }

    .gift-detail__price {
      margin-bottom: 0;
    }

    .gift-detail__link {
      width: fit-content;
      padding: 0.75rem 1.5rem;
    }
  }

  /* Desktop (lg: 1024px) */
  @media (min-width: 1024px) {
    .gift-detail {
      padding: 3rem;
    }

    .gift-detail__title {
      font-size: 2.5rem;
    }
  }

  .save-button:hover {
    color: var(--category-primary);
    background: var(--category-secondary);
  }

  .save-button:focus {
    outline: none;
    box-shadow:
      0 0 0 2px var(--color-white),
      0 0 0 4px var(--category-primary);
  }

  .save-button[aria-pressed="true"] {
    color: var(--category-primary);
  }

  .save-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }

  .save-button:disabled:hover {
    color: var(--color-gray-400);
    background: transparent;
  }

  .gift-detail__link:hover {
    background: var(--category-accent);
    transform: translateY(-1px);
  }
</style>

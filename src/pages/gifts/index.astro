---
import Layout from "../../layouts/Layout.astro";
import GiftIdeaCard from "../../components/GiftIdeaCard.astro";
import { GiftCategory } from "../../content/types";
import type { GiftSearchParams } from "../../content/types";
import { searchGifts, toSentenceCase } from "../../lib/gift-service";
import {
  getSearchParamsFromUrl,
  getSearchParamsFromForm,
  buildUrl,
} from "../../lib/url-utils";
import SearchBar from "../../components/gift-search/SearchBar.astro";
import CategoryFilter from "../../components/gift-search/CategoryFilter.astro";
import TagFilter from "../../components/gift-search/TagFilter.astro";
import PriceRangeFilter from "../../components/gift-search/PriceRangeFilter.astro";
import SortMenu from "../../components/gift-search/SortMenu.astro";

// Get all gifts to extract categories and tags
const allGifts = await searchGifts({});
const categories = Object.values(GiftCategory.enum);
const tags = [...new Set(allGifts.flatMap((gift) => gift.tags))].sort();

// Handle form submission
let searchParams: GiftSearchParams = {};
const url = new URL(Astro.request.url);

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const currentParams = getSearchParamsFromUrl(url);
  searchParams = getSearchParamsFromForm(formData, currentParams);
  return Astro.redirect(buildUrl("/gifts", searchParams));
} else {
  searchParams = getSearchParamsFromUrl(url);
}

// Get filtered gifts
const gifts = await searchGifts(searchParams);

// Enable server-side rendering for this page
export const prerender = false;
---

<Layout
  title="Gift Ideas"
  description="Browse our collection of unique gift ideas"
>
  <div class="container">
    <div class="search-page">
      <aside class="filters-container">
        <form id="filter-form" method="POST" class="filters">
          <SearchBar value={searchParams.query} />
          <PriceRangeFilter
            min={searchParams.priceRange?.min}
            max={searchParams.priceRange?.max}
          />
          <CategoryFilter
            categories={categories.map((category) => toSentenceCase(category))}
            selected={searchParams.categories}
          />
          <TagFilter
            tags={tags.map((tag) => toSentenceCase(tag))}
            selected={searchParams.tags}
          />
          <button type="submit" class="submit-button">View results</button>
        </form>
      </aside>

      <main class="results">
        <div class="results-header">
          <h1>Gift Ideas</h1>
          <SortMenu value={searchParams.sortBy} />
        </div>

        <div class="gift-grid">
          {gifts.map((gift) => <GiftIdeaCard gift={gift} />)}
        </div>
      </main>
    </div>
  </div>
</Layout>

<style>
  /* Container to center content and provide consistent padding */
  .container {
    width: 100%;
    max-width: 1280px;
    margin: 0 auto;
  }

  /* Mobile-first styles */
  .search-page {
    display: grid;
    grid-template-columns: minmax(0, 1fr);
    gap: 1.5rem;
    padding: 1rem;
  }

  .filters-container {
    grid-column: 1 / -1;
  }

  .filters {
    background: var(--color-white);
    padding: 1.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    height: fit-content;
  }

  .results {
    grid-column: 1 / -1;
  }

  .results-header {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .results-header h1 {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--color-gray-900);
    margin: 0;
  }

  .gift-grid {
    display: grid;
    grid-template-columns: minmax(0, 1fr);
    gap: 1rem;
  }

  .submit-button {
    width: 100%;
    padding: 0.75rem 1rem;
    margin-top: 1rem;
    background: var(--color-primary);
    color: var(--color-white);
    border: none;
    border-radius: 0.5rem;
    font-weight: 500;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .submit-button:hover {
    background: var(--color-primary-dark);
  }

  .submit-button:focus {
    outline: none;
    box-shadow:
      0 0 0 2px var(--color-white),
      0 0 0 4px var(--color-primary);
  }

  /* Tablet and up (md: 768px) */
  @media (min-width: 768px) {
    .search-page {
      padding: 1.5rem;
      gap: 2rem;
    }

    .results-header {
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .results-header h1 {
      font-size: 1.875rem;
    }

    .gift-grid {
      grid-template-columns: repeat(2, minmax(0, 1fr));
      gap: 1.5rem;
    }
  }

  /* Desktop (lg: 1024px) */
  @media (min-width: 1024px) {
    .search-page {
      grid-template-columns: 300px minmax(0, 1fr);
      padding: 2rem;
    }

    .filters-container {
      grid-column: 1 / 2;
    }

    .filters {
      position: sticky;
      top: 2rem;
    }

    .results {
      grid-column: 2 / -1;
    }

    .gift-grid {
      gap: 2rem;
    }
  }

  /* Large desktop (xl: 1280px) */
  @media (min-width: 1280px) {
    .gift-grid {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }
</style>

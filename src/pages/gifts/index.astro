---
import Layout from "../../layouts/Layout.astro";
import GiftIdeaCard from "../../components/GiftIdeaCard.astro";
import { GiftCategory } from "../../content/types";
import type { GiftSearchParams } from "../../content/types";
import { searchGifts, toSentenceCase } from "../../lib/gift-service";
import SearchBar from "../../components/gift-search/SearchBar.astro";
import CategoryFilter from "../../components/gift-search/CategoryFilter.astro";
import TagFilter from "../../components/gift-search/TagFilter.astro";
import PriceRangeFilter from "../../components/gift-search/PriceRangeFilter.astro";
import SortMenu from "../../components/gift-search/SortMenu.astro";

// Get all gifts to extract categories and tags
const allGifts = await searchGifts({});
const categories = Object.values(GiftCategory.enum);
const tags = [...new Set(allGifts.flatMap((gift) => gift.tags))].sort();

// Handle form submission
let searchParams: GiftSearchParams = {};
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const queryParts = [];

  // Handle search query
  const searchQuery = formData.get("search")?.toString();
  if (searchQuery) {
    queryParts.push(`q=${encodeURIComponent(searchQuery)}`);
  }

  // Handle price range
  const minPrice = formData.get("min-price")?.toString().trim();
  const maxPrice = formData.get("max-price")?.toString().trim();
  if (minPrice) queryParts.push(`min=${minPrice}`);
  if (maxPrice) queryParts.push(`max=${maxPrice}`);

  // Handle categories
  const categories = formData.getAll("category");
  if (categories.length > 0) {
    queryParts.push(`categories=${categories.join(",")}`);
  }

  // Handle tags
  const tags = formData.getAll("tag");
  if (tags.length > 0) {
    queryParts.push(`tags=${tags.join(",")}`);
  }

  // Handle sort
  const sortBy = formData.get("sort")?.toString();
  if (sortBy) {
    queryParts.push(`sort=${sortBy}`);
  }

  // Redirect with query params
  return Astro.redirect(`/gifts?${queryParts.join("&")}`);
} else {
  // Get search params from URL
  const url = new URL(Astro.request.url);
  searchParams = {
    query: url.searchParams.get("q") || undefined,
    categories:
      url.searchParams.get("categories")?.split(",").filter(Boolean) ||
      undefined,
    tags: url.searchParams.get("tags")?.split(",").filter(Boolean) || undefined,
    priceRange: {
      min: url.searchParams.get("min")
        ? Number(url.searchParams.get("min"))
        : undefined,
      max: url.searchParams.get("max")
        ? Number(url.searchParams.get("max"))
        : undefined,
    },
    sortBy: url.searchParams.get("sort") || undefined,
  };
}

// Get filtered gifts
const gifts = await searchGifts(searchParams);

// Enable server-side rendering for this page
export const prerender = false;
---

<Layout
  title="Gift Ideas"
  description="Browse our collection of unique gift ideas"
>
  <div class="search-page">
    <aside class="filters">
      <form id="filter-form" method="POST">
        <SearchBar value={searchParams.query} />
        <PriceRangeFilter
          min={searchParams.priceRange?.min}
          max={searchParams.priceRange?.max}
        />
        <CategoryFilter
          categories={categories.map((category) => toSentenceCase(category))}
          selected={searchParams.categories}
        />
        <TagFilter
          tags={tags.map((tag) => toSentenceCase(tag))}
          selected={searchParams.tags}
        />
        <button type="submit" class="submit-button">View results</button>
      </form>
    </aside>

    <main class="results">
      <div class="results-header">
        <h1>Gift Ideas</h1>
        <SortMenu value={searchParams.sortBy} />
      </div>

      <div class="gift-grid">
        {gifts.map((gift) => <GiftIdeaCard gift={gift} />)}
      </div>
    </main>
  </div>
</Layout>

<style>
  .search-page {
    display: grid;
    grid-template-columns: 300px 1fr;
    gap: 2rem;
    padding: 2rem;
  }

  .filters {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    height: fit-content;
  }

  .filters form {
    margin: 0;
    padding: 0;
    width: 100%;
  }

  @media (min-width: 769px) {
    .filters {
      position: sticky;
      top: 2rem;
    }
  }

  @media (max-width: 768px) {
    .search-page {
      grid-template-columns: 1fr;
      padding: 1rem;
    }

    .filters {
      margin-bottom: 1rem;
    }
  }

  .results-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }

  .gift-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
  }

  .submit-button {
    width: 100%;
    padding: 0.75rem 1.5rem;
    margin-top: 0.5rem;
    background: #111827;
    color: white;
    border: none;
    border-radius: 4px;
    font-weight: 500;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .submit-button:hover {
    background: #1f2937;
  }

  .submit-button:focus {
    outline: 2px solid #60a5fa;
    outline-offset: 2px;
  }
</style>
